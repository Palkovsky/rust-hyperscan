var searchIndex = {};
searchIndex['hyperscan'] = {"items":[[3,"PlatformInfo","hyperscan","",null,null],[3,"ExpressionInfo","","A type containing information related to an expression",null,null],[12,"min_width","","The minimum length in bytes of a match for the pattern.",0,null],[12,"max_width","","The maximum length in bytes of a match for the pattern.",0,null],[12,"unordered_matches","","Whether this expression can produce matches that are not returned in order, such as those produced by assertions.",0,null],[12,"matches_at_eod","","Whether this expression can produce matches at end of data (EOD).",0,null],[12,"matches_only_at_eod","","Whether this expression can *only* produce matches at end of data (EOD).",0,null],[3,"RawDatabase","","A compiled pattern database that can then be used to scan data.",null,null],[3,"CompileFlags","","",null,null],[3,"Pattern","","",null,null],[12,"expression","","",1,null],[12,"flags","","",1,null],[12,"id","","",1,null],[3,"RawScratch","","A large enough region of scratch space to support a given database.",null,null],[3,"RawStream","","A pattern matching state can be maintained across multiple blocks of target data",null,null],[4,"Block","","Block scan (non-streaming) database.",null,null],[4,"Streaming","","Streaming database.",null,null],[4,"Vectored","","Vectored scanning database.",null,null],[4,"Error","","Error Codes",null,null],[13,"Success","","The engine completed normally.",2,null],[13,"Invalid","","A parameter passed to this function was invalid.",2,null],[13,"NoMem","","A memory allocation failed.",2,null],[13,"ScanTerminated","","The engine was terminated by callback.",2,null],[13,"CompilerError","","The pattern compiler failed with more detail.",2,null],[13,"DbVersionError","","The given database was built for a different version of Hyperscan.",2,null],[13,"DbPlatformError","","The given database was built for a different platform (i.e., CPU type).",2,null],[13,"DbModeError","","The given database was built for a different mode of operation.\nThis error is returned when streaming calls are used with a block or vectored database and vice versa.",2,null],[13,"BadAlign","","A parameter passed to this function was not correctly aligned.",2,null],[13,"BadAlloc","","The memory allocator (either malloc() or the allocator set with hs_set_allocator())\ndid not correctly return memory suitably aligned for the largest representable data type on this platform.",2,null],[13,"Failed","","Unknown error code",2,null],[11,"clone","","",2,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",2,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"fmt","","",2,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"streaming"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"vectored"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mode","","",3,{"inputs":[{"name":"block"}],"output":{"name":"u32"}}],[11,"name","","",3,{"inputs":[{"name":"block"}],"output":{"name":"str"}}],[11,"mode","","",4,{"inputs":[{"name":"streaming"}],"output":{"name":"u32"}}],[11,"name","","",4,{"inputs":[{"name":"streaming"}],"output":{"name":"str"}}],[11,"mode","","",5,{"inputs":[{"name":"vectored"}],"output":{"name":"u32"}}],[11,"name","","",5,{"inputs":[{"name":"vectored"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"platforminfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","",6,{"inputs":[{"name":"platforminfo"}],"output":{"name":"platforminfo"}}],[11,"host","","",6,{"inputs":[{"name":"platforminfo"}],"output":{"name":"platforminfo"}}],[11,"new","","",6,{"inputs":[{"name":"platforminfo"},{"name":"u32"},{"name":"u64"}],"output":{"name":"platforminfo"}}],[11,"as_ptr","","",6,{"inputs":[{"name":"platforminfo"}],"output":{"name":"rawplatforminfoptr"}}],[11,"clone","","",0,{"inputs":[{"name":"expressioninfo"}],"output":{"name":"expressioninfo"}}],[11,"fmt","","",0,{"inputs":[{"name":"expressioninfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"rawdatabase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw","","Constructs a compiled pattern database from a raw pointer.",7,{"inputs":[{"name":"rawdatabase"},{"name":"rawdatabaseptr"}],"output":{"name":"rawdatabase"}}],[11,"free","","Free a compiled pattern database.",7,{"inputs":[{"name":"rawdatabase"}],"output":{"name":"result"}}],[11,"deref","","",7,{"inputs":[{"name":"rawdatabase"}],"output":{"name":"target"}}],[11,"database_mode","","",7,{"inputs":[{"name":"rawdatabase"}],"output":{"name":"u32"}}],[11,"database_size","","",7,{"inputs":[{"name":"rawdatabase"}],"output":{"name":"result"}}],[11,"database_info","","",7,{"inputs":[{"name":"rawdatabase"}],"output":{"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"rawdatabase"}],"output":{"name":"result"}}],[11,"deserialize","","",7,null],[11,"deserialize_at","","",7,null],[11,"drop","","",7,{"inputs":[{"name":"rawdatabase"}],"output":null}],[11,"stream_size","","Provides the size of the stream state allocated by a single stream opened against the given database.",7,{"inputs":[{"name":"rawdatabase"}],"output":{"name":"result"}}],[11,"compile","","The basic regular expression compiler.",7,{"inputs":[{"name":"rawdatabase"},{"name":"str"},{"name":"u32"},{"name":"platforminfo"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"compileflags"},{"name":"compileflags"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"compileflags"},{"name":"compileflags"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"compileflags"}],"output":{"name":"compileflags"}}],[11,"default","","",8,{"inputs":[{"name":"compileflags"}],"output":{"name":"compileflags"}}],[11,"fmt","","",8,{"inputs":[{"name":"compileflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",8,{"inputs":[{"name":"compileflags"},{"name":"u32"}],"output":{"name":"self"}}],[11,"into","","",8,{"inputs":[{"name":"compileflags"}],"output":{"name":"u32"}}],[11,"fmt","","",8,{"inputs":[{"name":"compileflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_set","","",8,{"inputs":[{"name":"compileflags"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"set","","",8,{"inputs":[{"name":"compileflags"},{"name":"u32"}],"output":{"name":"self"}}],[11,"parse","","",8,{"inputs":[{"name":"compileflags"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"compileflags"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"pattern"}],"output":{"name":"pattern"}}],[11,"fmt","","",1,{"inputs":[{"name":"pattern"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",1,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"pattern"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"result"}}],[11,"info","","",1,{"inputs":[{"name":"pattern"}],"output":{"name":"result"}}],[11,"build_for_platform","","",1,{"inputs":[{"name":"pattern"},{"name":"platforminfo"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"rawscratch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",9,{"inputs":[{"name":"rawscratch"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"rawscratch"}],"output":{"name":"self"}}],[11,"deref","","",9,{"inputs":[{"name":"rawscratch"}],"output":{"name":"target"}}],[11,"size","","",9,{"inputs":[{"name":"rawscratch"}],"output":{"name":"result"}}],[11,"realloc","","",9,{"inputs":[{"name":"rawscratch"},{"name":"t"}],"output":{"name":"result"}}],[11,"alloc","","",7,{"inputs":[{"name":"rawdatabase"}],"output":{"name":"result"}}],[11,"realloc","","",7,{"inputs":[{"name":"rawdatabase"},{"name":"rawscratch"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"rawstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",10,{"inputs":[{"name":"rawstream"}],"output":{"name":"target"}}],[11,"deref_mut","","",10,{"inputs":[{"name":"rawstream"}],"output":{"name":"target"}}],[11,"clone","","",10,{"inputs":[{"name":"rawstream"}],"output":{"name":"self"}}],[11,"close","","",10,{"inputs":[{"name":"rawstream"},{"name":"s"},{"name":"option"}],"output":{"name":"result"}}],[11,"reset","","",10,{"inputs":[{"name":"rawstream"},{"name":"streamflags"},{"name":"s"},{"name":"option"}],"output":{"name":"result"}}],[11,"scan","","",10,{"inputs":[{"name":"rawstream"},{"name":"t"},{"name":"scanflags"},{"name":"s"},{"name":"option"}],"output":{"name":"result"}}],[6,"RawDatabasePtr","","",null,null],[6,"RawPlatformInfoPtr","","",null,null],[6,"RawScratchPtr","","",null,null],[6,"ScanFlags","","Flags modifying the behaviour of scan function",null,null],[6,"MatchEventCallback","","Definition of the match event callback function type.",null,null],[6,"RawStreamPtr","","",null,null],[6,"StreamFlags","","Flags modifying the behaviour of the stream.",null,null],[6,"BlockDatabase","","Block scan (non-streaming) database.",null,null],[6,"StreamingDatabase","","Streaming database.",null,null],[6,"VectoredDatabase","","Vectored scanning database.",null,null],[6,"Patterns","","",null,null],[17,"HS_SUCCESS","","The engine completed normally.",null,null],[17,"HS_INVALID","","A parameter passed to this function was invalid.",null,null],[17,"HS_NOMEM","","A memory allocation failed.",null,null],[17,"HS_SCAN_TERMINATED","","The engine was terminated by callback.",null,null],[17,"HS_COMPILER_ERROR","","The pattern compiler failed, and the @ref hs_compile_error_t should be\ninspected for more detail.",null,null],[17,"HS_DB_VERSION_ERROR","","The given database was built for a different version of Hyperscan.",null,null],[17,"HS_DB_PLATFORM_ERROR","","The given database was built for a different platform (i.e., CPU type).",null,null],[17,"HS_DB_MODE_ERROR","","The given database was built for a different mode of operation. This error\nis returned when streaming calls are used with a block or vectored database\nand vice versa.",null,null],[17,"HS_BAD_ALIGN","","A parameter passed to this function was not correctly aligned.",null,null],[17,"HS_BAD_ALLOC","","The memory allocator (either malloc() or the allocator set with @ref\nhs_set_allocator()) did not correctly return memory suitably aligned for the\nlargest representable data type on this platform.",null,null],[17,"HS_MODE_BLOCK","","Compiler mode flag: Block scan (non-streaming) database.",null,null],[17,"HS_MODE_STREAM","","Compiler mode flag: Streaming database.",null,null],[17,"HS_MODE_VECTORED","","Compiler mode flag: Vectored scanning database.",null,null],[17,"HS_MODE_SOM_HORIZON_LARGE","","Compiler mode flag: use full precision to track start of match offsets in\nstream state.",null,null],[17,"HS_MODE_SOM_HORIZON_MEDIUM","","Compiler mode flag: use medium precision to track start of match offsets in\nstream state.",null,null],[17,"HS_MODE_SOM_HORIZON_SMALL","","Compiler mode flag: use limited precision to track start of match offsets in\nstream state.",null,null],[17,"HS_FLAG_CASELESS","","Compile flag: Set case-insensitive matching.",null,null],[17,"HS_FLAG_DOTALL","","Compile flag: Matching a `.` will not exclude newlines.",null,null],[17,"HS_FLAG_MULTILINE","","Compile flag: Set multi-line anchoring.",null,null],[17,"HS_FLAG_SINGLEMATCH","","Compile flag: Set single-match only mode.",null,null],[17,"HS_FLAG_ALLOWEMPTY","","Compile flag: Allow expressions that can match against empty buffers.",null,null],[17,"HS_FLAG_UTF8","","Compile flag: Enable UTF-8 mode for this expression.",null,null],[17,"HS_FLAG_UCP","","Compile flag: Enable Unicode property support for this expression.",null,null],[17,"HS_FLAG_PREFILTER","","Compile flag: Enable prefiltering mode for this expression.",null,null],[17,"HS_FLAG_SOM_LEFTMOST","","Compile flag: Enable leftmost start of match reporting.",null,null],[17,"HS_CPU_FEATURES_AVX2","","CPU features flag - Intel(R) Advanced Vector Extensions 2 (Intel(R) AVX2)",null,null],[17,"HS_TUNE_FAMILY_GENERIC","","Tuning Parameter - Generic",null,null],[17,"HS_TUNE_FAMILY_SNB","","Tuning Parameter - Intel(R) microarchitecture code name Sandy Bridge",null,null],[17,"HS_TUNE_FAMILY_IVB","","Tuning Parameter - Intel(R) microarchitecture code name Ivy Bridge",null,null],[17,"HS_TUNE_FAMILY_HSW","","Tuning Parameter - Intel(R) microarchitecture code name Haswell",null,null],[17,"HS_TUNE_FAMILY_SLM","","Tuning Parameter - Intel(R) microarchitecture code name Silvermont",null,null],[17,"HS_TUNE_FAMILY_BDW","","Tuning Parameter - Intel(R) microarchitecture code name Broadwell",null,null],[8,"Type","","Compile mode",null,null],[10,"mode","","",11,{"inputs":[{"name":"type"}],"output":{"name":"u32"}}],[10,"name","","",11,{"inputs":[{"name":"type"}],"output":{"name":"str"}}],[8,"Database","","A Hyperscan pattern database.",null,null],[10,"database_mode","","Provides the compiled mode of the given database.",12,{"inputs":[{"name":"database"}],"output":{"name":"u32"}}],[10,"database_size","","Provides the size of the given database in bytes.",12,{"inputs":[{"name":"database"}],"output":{"name":"result"}}],[10,"database_info","","Utility function providing information about a database.",12,{"inputs":[{"name":"database"}],"output":{"name":"result"}}],[8,"SerializableDatabase","","A pattern database can be serialized to a stream of bytes.",null,null],[10,"serialize","","Serialize a pattern database to a stream of bytes.",13,{"inputs":[{"name":"serializabledatabase"}],"output":{"name":"result"}}],[10,"deserialize","","Reconstruct a pattern database from a stream of bytes previously generated by RawDatabase::serialize().",13,null],[10,"deserialize_at","","Reconstruct a pattern database from a stream of bytes previously generated by RawDatabase::serialize() at a given memory location.",13,null],[8,"SerializedDatabase","","A pattern database was serialized to a stream of bytes.",null,null],[10,"len","","",14,{"inputs":[{"name":"serializeddatabase"}],"output":{"name":"usize"}}],[10,"as_slice","","",14,null],[11,"deserialize","","",14,{"inputs":[{"name":"serializeddatabase"}],"output":{"name":"result"}}],[11,"database_size","","",14,{"inputs":[{"name":"serializeddatabase"}],"output":{"name":"result"}}],[11,"database_info","","",14,{"inputs":[{"name":"serializeddatabase"}],"output":{"name":"result"}}],[8,"DatabaseBuilder","","The regular expression pattern database builder.",null,null],[11,"build","","This is the function call with which an expression is compiled into\na Hyperscan database which can be passed to the runtime functions",15,{"inputs":[{"name":"databasebuilder"}],"output":{"name":"result"}}],[10,"build_for_platform","","",15,{"inputs":[{"name":"databasebuilder"},{"name":"platforminfo"}],"output":{"name":"result"}}],[8,"Expression","","Providing expression information.",null,null],[10,"info","","",16,{"inputs":[{"name":"expression"}],"output":{"name":"result"}}],[8,"Scratch","","A Hyperscan scratch space.",null,null],[10,"size","","Provides the size of the given scratch space.",17,{"inputs":[{"name":"scratch"}],"output":{"name":"result"}}],[10,"realloc","","Reallocate a \"scratch\" space for use by Hyperscan.",17,{"inputs":[{"name":"scratch"},{"name":"t"}],"output":{"name":"result"}}],[8,"ScratchAllocator","","",null,null],[10,"alloc","","Allocate a \"scratch\" space for use by Hyperscan.",18,{"inputs":[{"name":"scratchallocator"}],"output":{"name":"result"}}],[10,"realloc","","Reallocate a \"scratch\" space for use by Hyperscan.",18,{"inputs":[{"name":"scratchallocator"},{"name":"s"}],"output":{"name":"result"}}],[8,"Scannable","","A byte stream can be matched",null,null],[10,"as_bytes","","",19,null],[8,"BlockScanner","","The block (non-streaming) regular expression scanner.",null,null],[10,"scan","","This is the function call in which the actual pattern matching takes place for block-mode pattern databases.",20,{"inputs":[{"name":"blockscanner"},{"name":"t"},{"name":"scanflags"},{"name":"s"},{"name":"option"}],"output":{"name":"result"}}],[8,"VectoredScanner","","The vectored regular expression scanner.",null,null],[10,"scan","","This is the function call in which the actual pattern matching takes place for vectoring-mode pattern databases.",21,{"inputs":[{"name":"vectoredscanner"},{"name":"vec"},{"name":"scanflags"},{"name":"s"},{"name":"option"}],"output":{"name":"result"}}],[8,"Stream","","The stream returned by StreamingDatabase::open_stream",null,null],[10,"close","","Close a stream.",22,{"inputs":[{"name":"stream"},{"name":"s"},{"name":"option"}],"output":{"name":"result"}}],[10,"reset","","Reset a stream to an initial state.",22,{"inputs":[{"name":"stream"},{"name":"streamflags"},{"name":"s"},{"name":"option"}],"output":{"name":"result"}}],[8,"StreamingScanner","","The streaming regular expression scanner.",null,null],[10,"open_stream","","Open and initialise a stream.",23,{"inputs":[{"name":"streamingscanner"},{"name":"streamflags"}],"output":{"name":"result"}}],[14,"check_hs_error!","","",null,null],[14,"assert_hs_error!","","",null,null],[14,"check_compile_error!","","",null,null],[14,"pattern!","","",null,null],[14,"patterns!","","",null,null],[11,"deserialize","","",14,{"inputs":[{"name":"serializeddatabase"}],"output":{"name":"result"}}],[11,"database_size","","",14,{"inputs":[{"name":"serializeddatabase"}],"output":{"name":"result"}}],[11,"database_info","","",14,{"inputs":[{"name":"serializeddatabase"}],"output":{"name":"result"}}],[11,"build","","This is the function call with which an expression is compiled into\na Hyperscan database which can be passed to the runtime functions",15,{"inputs":[{"name":"databasebuilder"}],"output":{"name":"result"}}],[11,"build_for_platform","","",24,{"inputs":[{"name":"patterns"},{"name":"platforminfo"}],"output":{"name":"result"}}],[11,"scan","","",25,{"inputs":[{"name":"blockdatabase"},{"name":"t"},{"name":"scanflags"},{"name":"s"},{"name":"option"}],"output":{"name":"result"}}],[11,"scan","","",26,{"inputs":[{"name":"vectoreddatabase"},{"name":"vec"},{"name":"scanflags"},{"name":"s"},{"name":"option"}],"output":{"name":"result"}}],[11,"open_stream","","",27,{"inputs":[{"name":"streamingdatabase"},{"name":"streamflags"}],"output":{"name":"result"}}]],"paths":[[3,"ExpressionInfo"],[3,"Pattern"],[4,"Error"],[4,"Block"],[4,"Streaming"],[4,"Vectored"],[3,"PlatformInfo"],[3,"RawDatabase"],[3,"CompileFlags"],[3,"RawScratch"],[3,"RawStream"],[8,"Type"],[8,"Database"],[8,"SerializableDatabase"],[8,"SerializedDatabase"],[8,"DatabaseBuilder"],[8,"Expression"],[8,"Scratch"],[8,"ScratchAllocator"],[8,"Scannable"],[8,"BlockScanner"],[8,"VectoredScanner"],[8,"Stream"],[8,"StreamingScanner"],[6,"Patterns"],[6,"BlockDatabase"],[6,"VectoredDatabase"],[6,"StreamingDatabase"]]};
initSearch(searchIndex);
