initSidebarItems({"constant":[["HS_BAD_ALIGN","A parameter passed to this function was not correctly aligned."],["HS_BAD_ALLOC","The memory allocator (either malloc() or the allocator set with @ref hs_set_allocator()) did not correctly return memory suitably aligned for the largest representable data type on this platform."],["HS_COMPILER_ERROR","The pattern compiler failed, and the @ref hs_compile_error_t should be inspected for more detail."],["HS_CPU_FEATURES_AVX2","CPU features flag - Intel(R) Advanced Vector Extensions 2 (Intel(R) AVX2)"],["HS_DB_MODE_ERROR","The given database was built for a different mode of operation. This error is returned when streaming calls are used with a block or vectored database and vice versa."],["HS_DB_PLATFORM_ERROR","The given database was built for a different platform (i.e., CPU type)."],["HS_DB_VERSION_ERROR","The given database was built for a different version of Hyperscan."],["HS_FLAG_ALLOWEMPTY","Compile flag: Allow expressions that can match against empty buffers."],["HS_FLAG_CASELESS","Compile flag: Set case-insensitive matching."],["HS_FLAG_DOTALL","Compile flag: Matching a `.` will not exclude newlines."],["HS_FLAG_MULTILINE","Compile flag: Set multi-line anchoring."],["HS_FLAG_PREFILTER","Compile flag: Enable prefiltering mode for this expression."],["HS_FLAG_SINGLEMATCH","Compile flag: Set single-match only mode."],["HS_FLAG_SOM_LEFTMOST","Compile flag: Enable leftmost start of match reporting."],["HS_FLAG_UCP","Compile flag: Enable Unicode property support for this expression."],["HS_FLAG_UTF8","Compile flag: Enable UTF-8 mode for this expression."],["HS_INVALID","A parameter passed to this function was invalid."],["HS_MODE_BLOCK","Compiler mode flag: Block scan (non-streaming) database."],["HS_MODE_SOM_HORIZON_LARGE","Compiler mode flag: use full precision to track start of match offsets in stream state."],["HS_MODE_SOM_HORIZON_MEDIUM","Compiler mode flag: use medium precision to track start of match offsets in stream state."],["HS_MODE_SOM_HORIZON_SMALL","Compiler mode flag: use limited precision to track start of match offsets in stream state."],["HS_MODE_STREAM","Compiler mode flag: Streaming database."],["HS_MODE_VECTORED","Compiler mode flag: Vectored scanning database."],["HS_NOMEM","A memory allocation failed."],["HS_SCAN_TERMINATED","The engine was terminated by callback."],["HS_SUCCESS","The engine completed normally."],["HS_TUNE_FAMILY_BDW","Tuning Parameter - Intel(R) microarchitecture code name Broadwell"],["HS_TUNE_FAMILY_GENERIC","Tuning Parameter - Generic"],["HS_TUNE_FAMILY_HSW","Tuning Parameter - Intel(R) microarchitecture code name Haswell"],["HS_TUNE_FAMILY_IVB","Tuning Parameter - Intel(R) microarchitecture code name Ivy Bridge"],["HS_TUNE_FAMILY_SLM","Tuning Parameter - Intel(R) microarchitecture code name Silvermont"],["HS_TUNE_FAMILY_SNB","Tuning Parameter - Intel(R) microarchitecture code name Sandy Bridge"]],"enum":[["Block","Block scan (non-streaming) database."],["Error","Error Codes"],["Streaming","Streaming database."],["Vectored","Vectored scanning database."]],"macro":[["pattern!","Define `Pattern` with flags"],["patterns!","Define multi `Pattern` with flags and ID"]],"struct":[["CompileFlags","Flags which modify the behaviour of the expression."],["ExpressionInfo","A type containing information related to an expression"],["Pattern","Pattern that has matched."],["PlatformInfo","A type containing information on the target platform which may optionally be provided to the compile calls"],["RawDatabase","A compiled pattern database that can then be used to scan data."],["RawScratch","A large enough region of scratch space to support a given database."],["RawStream","A pattern matching state can be maintained across multiple blocks of target data"]],"trait":[["BlockScanner","The block (non-streaming) regular expression scanner."],["Database","A Hyperscan pattern database."],["DatabaseBuilder","The regular expression pattern database builder."],["Expression","Providing expression information."],["Scannable","A byte stream can be matched"],["Scratch","A Hyperscan scratch space."],["ScratchAllocator","`Scratch` allocator"],["SerializableDatabase","A pattern database can be serialized to a stream of bytes."],["SerializedDatabase","A pattern database was serialized to a stream of bytes."],["Stream","The stream returned by StreamingDatabase::open_stream"],["StreamingScanner","The streaming regular expression scanner."],["Type","Compile mode"],["VectoredScanner","The vectored regular expression scanner."]],"type":[["BlockDatabase","Block scan (non-streaming) database."],["MatchEventCallback","Definition of the match event callback function type."],["MatchEventCallbackMut",""],["Patterns","Vec of `Pattern`"],["RawDatabasePtr","Raw `Database` pointer"],["RawPlatformInfoPtr","Raw `PlatformInfo` pointer"],["RawScratchPtr","Raw `Scratch` pointer"],["RawStreamPtr","Raw `Stream` pointer"],["ScanFlags","Flags modifying the behaviour of scan function"],["StreamFlags","Flags modifying the behaviour of the stream."],["StreamingDatabase","Streaming database."],["VectoredDatabase","Vectored scanning database."]]});